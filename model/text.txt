"pipeline": [
    { "$addFields": { "userId": { "$toObjectId": "$userId" }}},
    { "$match": { "$expr": { "$eq": [ "$userId", "$$userId" ] } } }
  ],

  1 country +>
  2. State  +>
  3. city  +>
  4. Area  +>
  5. unit  +>
  6.user +>
     a. user add +>
     b. use edit +>
     c. user delete +>
  7 permission +>
     a. add permission +>
     b. edit permisstion +>
     c. delete permission +>
     d. dynamic navigation on user login(2) +>
  8. company 
     a. add company 
     b. edit company 
     c delete company 
  10.product 
    a. add single product
    b. update single product 
    c. bulk product upload
    d. bulk product update 
    e. search product -> update & delete 
  9.machine 
    a. add machine 
    b. add machine slot
    c. edit machine details and slot(2)
    d. add machine configuraton 
    e. edit machine configuration 
    d.delete machine 
  11.employee 
    a. add single employee
    b. update single employee 
    c. CSV bulk employee upload
    d. CSV bulk employee update 
    e. search employee -> update & delete 
  12.employee credit 
    a. add single credit
    b. update single credit 
    c. CSV bulk credit upload
    d. CSV bulk credit update 
    e. search credit -> update & delete 
  13.transactions 
   a.search transaction -> modify to remove false transaction 
   b.download transaction CSV report  
  14.warehouse
     a. add warehouse 
     b. edit warehouse 
     c. delete warehouse



user update 
 async (req, res, next) => {
        const newData=req.body
        const admin=req.user.id
        const id = req.params.id;
        const count = await TableModel.getDataCount(id,admin);
        if(count){
            const data = await TableModel.updateById(id,newData,admin);
            if (data) {
                return rc.setResponse(res, {
                    success: true,
                    msg: 'Data Fetched',
                    data: data
                });
            } else {
                return rc.setResponse(res, {
                    msg: "Data not Found"
                })
            }
        }else{
            return rc.setResponse(res, {
                msg: "Data not Found OR Permission Denied"
            })
        }
       
    }

    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2M2U0Nzk2YjhlOTkwYmUzODUxMGIzOTIiLCJpYXQiOjE2NzU5Njk2MzB9.N07rltFZxxTiel5h-gne68BzCUqdCTRO_CQXnrDkahw
    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2M2U0Nzk2YjhlOTkwYmUzODUxMGIzOTIiLCJpYXQiOjE2NzU5Njk2OTJ9.VSFDS5p-C9CHZAvaNYLAG7UtflSloK-Ai_5pHh0oDDc
    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2M2U0Nzk2YjhlOTkwYmUzODUxMGIzOTIiLCJpYXQiOjE2NzU5MTc2NzV9.WddfqC_0uZX6LoPA6lPidsovnXyXsfuOaC8U2j1jKnA